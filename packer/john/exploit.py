import angr
import claripy
from pwn import *

input_len = 33

prog = angr.Project('./john', support_selfmodifying_code=True)
prog.hook_symbol('ptrace', angr.SIM_PROCEDURES['stubs']['ReturnUnconstrained'](return_value=0))

find = [0x804983e]
#avoid = [0x00400e92]

input_flag = claripy.BVS('flag', input_len * 8)

state = prog.factory.full_init_state(add_options=angr.options.unicorn, args=['./john', input_flag])

flag_start = 'flag{packer-4a3-1337'

for i in range(len(flag_start)):
    state.add_constraints(input_flag.get_byte(i) == ord(flag_start[i]))

simgr = prog.factory.simulation_manager(state)

while simgr.active:
    simgr.run(n=20)
    if 'deadended' in simgr.stashes and simgr.deadended:
        simgr.stashes['deadended'] = simgr.deadended[-20:]
    if simgr.errored:
        simgr.errored = simgr.errored[-20:]

assert simgr.deadended
flag = simgr.deadended[-1].posix.dumps(0).split(b'\n')[0]
import ipdb; ipdb.set_trace()

print(flag)

'''

simgr.explore(find=find#,
 #avoid=avoid
 )

if simgr.found:
    found = simgr.found[0]
    flag = found.solver.eval(input_flag)
    flag = bytearray.fromhex(str(hex(flag))[2:])

    print('flag:', flag)
''' 

print('end.')
    
